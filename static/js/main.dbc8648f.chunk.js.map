{"version":3,"sources":["logo_ethereum.svg","../node_modules/@ethereum-alarm-clock/lib/built/abi sync /^/.*/.json$","components/UserPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","webpackEmptyContext","req","e","Error","code","keys","resolve","id","UserPanel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","connected","account","alert","balance","contract_called","receiver_address","number_of_eth","hours","checkForUpdate","event","setState","selectedAddress","hideAlert","ShowPopUpWarning","react_default","a","createElement","react_bootstrap_sweetalert_default","warning","title","onConfirm","ShowPopUpSuccess","response","success","sendWithoutDelay","asyncToGenerator","regenerator_default","mark","_callee","web3","wrap","_context","prev","next","eth","sendTransaction","from","to","value","utils","toWei","on","hash","receipt","confirmationNumber","console","error","stop","handleSubmit","_ref2","_callee2","eac","_context2","preventDefault","EAC","log","scheduleTransaction","_x","apply","arguments","handleInputChange","defineProperty","target","name","currentProvider","publicConfigStore","blockinTheFuture","BigNumber","getBlockNumber","windowStart","schedule","toAddress","timestampScheduling","callGas","callValue","Math","pow","status","scheduledTx","transactionRequestFromReceipt","fillData","address","self","getBalance","then","balance_eth","fromWei","Grid","Row","className","Col","xs","md","onSubmit","type","placeholder","onChange","step","min","Component","withWeb3","App","getClient_getCurrentNetwork","netId","connectToMetaMask","assertThisInitialized","window","ethereum","enable","addresses","givenProvider","networkVersion","connected_state","components_UserPanel","src","logo","alt","onClick","Boolean","location","hostname","match","ReactDOM","render","dist_default","defaultProvider","cb","Web3","providers","HttpProvider","loading","err","concat","message","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dbc8648f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_ethereum.2b470564.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 467;","import React, {Component} from 'react';\r\nimport {withWeb3} from \"react-web3-provider\";\r\nimport { EAC } from '@ethereum-alarm-clock/lib';\r\nimport moment from 'moment';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\nimport BigNumber from 'bignumber.js';\r\nimport {Grid, Row, Col} from 'react-bootstrap'\r\n\r\nclass UserPanel extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        const {web3} = this.props;\r\n        web3.currentProvider.publicConfigStore.on('update', this.checkForUpdate);\r\n    }\r\n    state = {\r\n        connected : this.props.connected,\r\n        account: this.props.account,\r\n        alert: null,\r\n        balance:'',\r\n        contract_called: false,\r\n        receiver_address:'',\r\n        number_of_eth:0,\r\n        hours:0\r\n    };\r\n\r\n\r\n\r\n    checkForUpdate = (event) =>\r\n    {\r\n        this.setState({\r\n            account: event.selectedAddress\r\n        })\r\n    }\r\n\r\n\r\n    hideAlert = () =>\r\n    {\r\n        this.setState({\r\n            alert: null\r\n        });\r\n    }\r\n\r\n    ShowPopUpWarning = () =>\r\n    {\r\n        this.setState({ alert:\r\n                (\r\n                    <SweetAlert\r\n                        warning\r\n                        title=\"Please Connect to Rinkeby!\"\r\n                        onConfirm={this.hideAlert}\r\n                    >\r\n                    </SweetAlert>\r\n                )\r\n        });\r\n    }\r\n\r\n    ShowPopUpSuccess = (response) =>\r\n    {\r\n        this.setState({ alert:\r\n                (\r\n                    <SweetAlert\r\n                        success\r\n                        title=\"Transaction Success\"\r\n                        onConfirm={this.hideAlert}>\r\n\r\n                        {response}\r\n\r\n                    </SweetAlert>\r\n                )\r\n        });\r\n    }\r\n\r\n\r\n    sendWithoutDelay = async() =>\r\n    {\r\n        const {web3} = this.props;\r\n\r\n       await web3.eth.sendTransaction({\r\n            from: this.state.account,\r\n            to: this.state.receiver_address,\r\n            value:  web3.utils.toWei(this.state.number_of_eth, \"ether\")\r\n        })\r\n            .on('transactionHash', function(hash)\r\n            {\r\n\r\n            })\r\n            .on('receipt', function(receipt)\r\n            {\r\n\r\n            })\r\n            .on('confirmation', function(confirmationNumber, receipt){\r\n\r\n            })\r\n            .on('error', console.error); // If a out of gas error, the second parameter is the receipt.\r\n\r\n    };\r\n\r\n    async scheduleTransaction(web3, eac)\r\n    {\r\n        let blockinTheFuture = this.state.hours * 60 * 4; // 1 minute - 15 secondes par block\r\n        const windowStart = new BigNumber((await web3.eth.getBlockNumber()) + blockinTheFuture);\r\n\r\n        const receipt = await eac.schedule({\r\n            from: this.state.account,\r\n            toAddress: this.state.receiver_address,\r\n            timestampScheduling: false,\r\n            callGas: new BigNumber(1000000),\r\n            callValue: this.state.number_of_eth * new BigNumber(Math.pow(10, 18)),\r\n            windowStart\r\n        });\r\n\r\n        console.log(receipt);\r\n\r\n        if (receipt.status === true)\r\n        {\r\n            const scheduledTx = eac.transactionRequestFromReceipt(receipt);\r\n            await scheduledTx.fillData();\r\n            console.log(scheduledTx);\r\n            const response = 'Address of scheduled transaction is:' +  scheduledTx.address + '\\n';\r\n            this.ShowPopUpSuccess(response)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleSubmit = async(event) =>\r\n    {\r\n        event.preventDefault();\r\n        const {web3} = this.props;\r\n        const eac = new EAC(web3);\r\n\r\n        console.log(typeof this.state.hours);\r\n        if (this.state.hours > 0) {\r\n            await this.scheduleTransaction(web3, eac);\r\n        }\r\n        else {\r\n            await this.sendWithoutDelay();\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    handleInputChange = (event) =>\r\n    {\r\n        event.preventDefault();\r\n        this.setState(\r\n            {\r\n               [event.target.name]: event.target.value\r\n            });\r\n\r\n    };\r\n\r\n    async componentDidMount()\r\n    {\r\n        const {web3} = this.props;\r\n        let self = this;\r\n\r\n        web3.eth.getBalance(this.props.account).then(balance =>\r\n        {\r\n            const balance_eth = web3.utils.fromWei(balance, \"ether\"); // DEBUG\r\n            self.setState(\r\n                {\r\n                    balance: balance_eth\r\n                })\r\n        });\r\n    }\r\n\r\n    render()\r\n    {\r\n        console.log(\"Render called\");\r\n\r\n            return (<Grid>\r\n                {this.state.alert}\r\n                <Row className=\"show-grid text-center\">\r\n                    <Col xs={12} md={12}>\r\n                        <p> Disclaimer : No timenodes are available on Rinkeby, you'll have to claim your ETH after the delayed time</p>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"show-grid mt-5\">\r\n                    <Col xs={6} md={6}>\r\n                        <form onSubmit={this.handleSubmit}>\r\n\r\n                            <p> Receiver's address </p>\r\n                            <p> <input name='receiver_address' type='text' placeholder='Receiver Address' onChange={this.handleInputChange} /> </p>\r\n\r\n                            <p> Amount to send </p>\r\n                            <p> <input name='number_of_eth' type='number' step=\"any\" placeholder='Amount' min=\"0\" onChange={this.handleInputChange} /> </p>\r\n\r\n                            <p> Send Later </p>\r\n                            <p> <input name='hours' type='number' placeholder='Hours to delay' min=\"0\" onChange={this.handleInputChange} /> </p>\r\n                            <p> If 0, the transaction will be sent directly </p>\r\n                            <p><button className=\"btn btn-secondary mt-2\">Create a delayed transaction</button></p>\r\n                        </form>\r\n\r\n                    </Col>\r\n                    <Col xs={6} md={4}>\r\n                        <p>Your Account address:</p>\r\n                        <p className=\"font-weight-bold\">\r\n                            {this.state.account}\r\n                        </p>\r\n\r\n                        <p>Your Balance address:</p>\r\n                        <p className=\"font-weight-bold\">\r\n                            {this.state.balance} ETH\r\n                        </p>\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n\r\n            </Grid>);\r\n\r\n        }\r\n\r\n}\r\n\r\nexport default withWeb3(UserPanel);\r\n","import React, { Component } from 'react';\nimport logo from './logo_ethereum.svg';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport { withWeb3 } from 'react-web3-provider';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport UserPanel from \"./components/UserPanel\";\n\n\n\nclass App extends Component\n{\n    state = {\n        account: null,\n        alert: null,\n        connected: false,\n        web3:null\n    };\n\n   /* getClient_getCurrentAccount = (web3) =>\n    {\n        let self = this;\n        web3.eth.getAccounts().then(account =>\n        {\n            console.log(account); // DEBUG\n\n        })\n    };*/\n\n    hideAlert = () =>\n    {\n        this.setState({\n            alert: null\n        });\n    }\n\n    ShowPopUpWarning = () =>\n    {\n        this.setState({ alert:\n                (\n                    <SweetAlert\n                        warning\n                        title=\"Please Connect to Rinkeby!\"\n                        onConfirm={this.hideAlert}\n                    >\n                    </SweetAlert>\n                )\n        });\n    }\n\n    ShowPopUpSuccess = () =>\n    {\n        this.setState({ alert:\n                (\n                    <SweetAlert\n                        success\n                        title=\"You are connected to Rinkeby!\"\n                        onConfirm={this.hideAlert}\n                    >\n                    </SweetAlert>\n                )\n        });\n    }\n\n    getClient_getCurrentNetwork = (netId) =>\n    {\n            switch (netId)\n            {\n                case \"1\":\n                    console.log('This is the Main network.');\n                    this.ShowPopUpWarning();\n                    break;\n                case \"2\":\n                    this.ShowPopUpWarning();\n                    console.log('This is the deprecated Morden test network.');\n                    break;\n                case \"3\":\n                    this.ShowPopUpWarning();\n                    console.log('This is the Ropsten test network.');\n                    break;\n                case \"4\":\n                    console.log('This is the Rinkeby test network.');\n                    break;\n                case \"42\":\n                    this.ShowPopUpWarning();\n                    console.log('This is the Kovan test network.');\n                    break;\n                default:\n                    console.log('This is an unknown network.');\n            }\n\n    };\n\n\n    checkForUpdate = (event) =>\n    {\n        this.setState({\n            account: event.selectedAddress\n        })\n    }\n\n    connectToMetaMask = () =>\n    {\n        const {web3} = this.props;\n        this.setState({\n            web3: web3\n        });\n\n        let self = this;\n\n        if (window.ethereum)\n        {\n            console.log(\"Ethereum\");\n            window.ethereum.enable().then((addresses) =>\n            {\n                //console.log(addresses);\n                self.setState(\n                    {\n                        account: addresses[0]\n                    });\n                self.getClient_getCurrentNetwork(web3.eth.givenProvider.networkVersion);\n                //self.getClient_getCurrentAccount(web3);\n                if (web3.eth.givenProvider.networkVersion === \"4\")\n                {\n                    this.setState({\n                        connected:true\n                    });\n                }\n                //web3.currentProvider.publicConfigStore.on('update', self.checkForUpdate);\n            });\n        }\n        else\n        {\n            console.log(\"Metamask\")\n        }\n\n\n    };\n\n\n     connected_state = () =>\n     {\n         if (this.state.connected)\n         {\n             return <div className=\"App\">\n                    <header className=\"App-header\">\n                        <h3 className=\"text-center text-white\">Multis</h3>\n                    </header>\n                    <UserPanel account={this.state.account} connected={this.state.connected} web3={this.state.web3}/>\n             </div>;\n         }\n         else\n         {\n             return <div className=\"App text-center\">\n                 <header className=\"App-header\">\n                     <h3 className=\"text-center text-white\">Crypto Management Ethereum</h3>\n                 </header>\n                 <div className=\"mt-5 container-fluid\">\n                     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n                     <div className=\"container-fluid\">\n                         <button className=\"mt-5 btn btn-primary\" onClick={this.connectToMetaMask}>\n                             Connect your app\n                         </button>\n                     </div>\n                 </div>\n                 {this.state.alert}\n             </div>;\n         }\n     };\n\n\n  render()\n  {\n      return (this.connected_state())\n  }\n}\n\nexport default withWeb3(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Web3 from 'web3';\nimport Web3Provider from \"react-web3-provider\";\n\n\nconst deFaultProvider = (cb) =>\n{\n    cb(new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/4cb7de1b186f49f5a300795919445ab0\")));\n};\n\nReactDOM.render(\n\n    <Web3Provider\n        defaultProvider = {deFaultProvider}\n        loading=\"Loading...\"\n        error={(err) => `Connection error: ${err.message}`}>\n        <App />\n    </Web3Provider>\n    , document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}